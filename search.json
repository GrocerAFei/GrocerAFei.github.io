[{"title":"回溯法思想及其经典问题的应用","url":"/2025/04/25/hello-world/","content":"回溯法的核心思想基于“试错”——通过尝试分步去解决一个问题，在解决过程中，当它通过尝试发现现有的分步答案不能得到有效的正确的解时，它将取消上一步甚至是几步的计算，再通过其他的可能的分步解再次尝试找到问题的答案。\n因此，回溯算法非常适合于解决那些有多个步骤，每一步都有多个选择的问题，在组合问题、排列问题、分割问题等领域表现出色。\n\n代码框架void backtrack(路径, 选择列表) &#123;    if (满足结束条件) &#123;        result.add(路径);        return;    &#125;    for (选择 : 选择列表) &#123;        做选择;        backtrack(路径, 选择列表);        撤销选择;    &#125;&#125;\n\n路径记录（Path）它记录了从根节点到当前节点的路径。用于表示当前的解决方案状态。\n选择列表（Choices）包含了当前节点可以做出的所有选择，通常需要在进入下一层递归前进行更新。\n结束条件（Termination）指明何时将当前路径的解决方案添加到结果集中或者终止递归。\n经典问题\n全排列：给定一个不同的整数集合，返回所有可能的排列。\nN皇后问题：在NxN的棋盘上摆放N个皇后，使得它们不能相互攻击。\n组合总和：找出所有可以使数字和为目标数的组合。\n括号生成：生成所有可能的并且有效的括号组合。\n\n力扣习题","categories":["算法"],"tags":["回溯法"]}]